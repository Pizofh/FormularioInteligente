# Generated by Django 5.2.1 on 2025-07-20 02:25

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="FamilyData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "spouse_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Spouse's Name",
                    ),
                ),
                (
                    "spouse_id",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(999999999999),
                        ],
                        verbose_name="Spouse's ID",
                    ),
                ),
                (
                    "spouse_profession",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Spouse's Profession",
                    ),
                ),
                (
                    "spouse_phone",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(999999999999),
                        ],
                        verbose_name="Spouse's Mobile",
                    ),
                ),
                (
                    "spouse_street_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Ring Road", "Ring Road"),
                            ("Highway", "Highway"),
                            ("Avenue", "Avenue"),
                            ("Avenue Street", "Avenue Street"),
                            ("Avenue Road", "Avenue Road"),
                            ("Street", "Street"),
                            ("Alley", "Alley"),
                            ("Road", "Road"),
                            ("Circle", "Circle"),
                            ("Diagonal", "Diagonal"),
                            ("Cross Street", "Cross Street"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Street Type",
                    ),
                ),
                (
                    "spouse_principal_number",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Main Number",
                    ),
                ),
                (
                    "spouse_principal_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Main Letter",
                    ),
                ),
                ("spouse_bis", models.BooleanField(default=False, verbose_name="Bis?")),
                (
                    "spouse_bis_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Bis Letter",
                    ),
                ),
                (
                    "spouse_quadrant",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EAST", "EAST"),
                            ("WEST", "WEST"),
                            ("NORTH", "NORTH"),
                            ("SOUTH", "SOUTH"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Quadrant",
                    ),
                ),
                (
                    "spouse_second_number",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Secondary Number",
                    ),
                ),
                (
                    "spouse_second_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Secondary Letter",
                    ),
                ),
                (
                    "spouse_second_quadrant",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EAST", "EAST"),
                            ("WEST", "WEST"),
                            ("NORTH", "NORTH"),
                            ("SOUTH", "SOUTH"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Secondary Quadrant",
                    ),
                ),
                (
                    "spouse_nmbr",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Final Number",
                    ),
                ),
                (
                    "spouse_complement",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Complement/Special Address",
                    ),
                ),
                (
                    "spouse_built_address",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Formatted Address",
                    ),
                ),
                (
                    "father_name",
                    models.CharField(
                        max_length=55,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Father's Name",
                    ),
                ),
                (
                    "father_lives",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Is Alive?",
                    ),
                ),
                (
                    "father_id",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(99999999999),
                        ],
                        verbose_name="ID No.",
                    ),
                ),
                (
                    "father_phone",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(99999999999),
                        ],
                        verbose_name="Father's Phone",
                    ),
                ),
                (
                    "father_profession",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Father's Profession",
                    ),
                ),
                (
                    "father_street_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Ring Road", "Ring Road"),
                            ("Highway", "Highway"),
                            ("Avenue", "Avenue"),
                            ("Avenue Street", "Avenue Street"),
                            ("Avenue Road", "Avenue Road"),
                            ("Street", "Street"),
                            ("Alley", "Alley"),
                            ("Road", "Road"),
                            ("Circle", "Circle"),
                            ("Diagonal", "Diagonal"),
                            ("Cross Street", "Cross Street"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Street Type",
                    ),
                ),
                (
                    "father_principal_number",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Main Number",
                    ),
                ),
                (
                    "father_principal_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Main Letter",
                    ),
                ),
                ("father_bis", models.BooleanField(default=False, verbose_name="Bis?")),
                (
                    "father_bis_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Bis Letter",
                    ),
                ),
                (
                    "father_quadrant",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EAST", "EAST"),
                            ("WEST", "WEST"),
                            ("NORTH", "NORTH"),
                            ("SOUTH", "SOUTH"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Quadrant",
                    ),
                ),
                (
                    "father_second_number",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Secondary Number",
                    ),
                ),
                (
                    "father_second_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Secondary Letter",
                    ),
                ),
                (
                    "father_second_quadrant",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EAST", "EAST"),
                            ("WEST", "WEST"),
                            ("NORTH", "NORTH"),
                            ("SOUTH", "SOUTH"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Secondary Quadrant",
                    ),
                ),
                (
                    "father_nmbr",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Final Number",
                    ),
                ),
                (
                    "father_complement",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Complement/Special Address",
                    ),
                ),
                (
                    "father_built_address",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Formatted Address",
                    ),
                ),
                (
                    "mother_name",
                    models.CharField(
                        max_length=55,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Mother's Name",
                    ),
                ),
                (
                    "mother_lives",
                    models.CharField(
                        choices=[("Sí", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Is Alive?",
                    ),
                ),
                (
                    "mother_id",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(99999999999),
                        ],
                        verbose_name="ID No.",
                    ),
                ),
                (
                    "mother_phone",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(99999999999),
                        ],
                        verbose_name="Mother's Phone",
                    ),
                ),
                (
                    "mother_profession",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Mother's Profession",
                    ),
                ),
                (
                    "mother_street_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Ring Road", "Ring Road"),
                            ("Highway", "Highway"),
                            ("Avenue", "Avenue"),
                            ("Avenue Street", "Avenue Street"),
                            ("Avenue Road", "Avenue Road"),
                            ("Street", "Street"),
                            ("Alley", "Alley"),
                            ("Road", "Road"),
                            ("Circle", "Circle"),
                            ("Diagonal", "Diagonal"),
                            ("Cross Street", "Cross Street"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Street Type",
                    ),
                ),
                (
                    "mother_principal_number",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Main Number",
                    ),
                ),
                (
                    "mother_principal_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Main Letter",
                    ),
                ),
                ("mother_bis", models.BooleanField(default=False, verbose_name="Bis?")),
                (
                    "mother_bis_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Bis Letter",
                    ),
                ),
                (
                    "mother_quadrant",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EAST", "EAST"),
                            ("WEST", "WEST"),
                            ("NORTH", "NORTH"),
                            ("SOUTH", "SOUTH"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Quadrant",
                    ),
                ),
                (
                    "mother_second_number",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Secondary Number",
                    ),
                ),
                (
                    "mother_second_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Secondary Letter",
                    ),
                ),
                (
                    "mother_second_quadrant",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EAST", "EAST"),
                            ("WEST", "WEST"),
                            ("NORTH", "NORTH"),
                            ("SOUTH", "SOUTH"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Secondary Quadrant",
                    ),
                ),
                (
                    "mother_nmbr",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Final Number",
                    ),
                ),
                (
                    "mother_complement",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Complement/Special Address",
                    ),
                ),
                (
                    "mother_built_address",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Formatted Address",
                    ),
                ),
            ],
            options={
                "verbose_name": "Family Data",
                "verbose_name_plural": "Family Data",
            },
        ),
        migrations.CreateModel(
            name="PersonalData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        max_length=30,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="First name",
                    ),
                ),
                (
                    "second_name",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Second name",
                    ),
                ),
                (
                    "lastname",
                    models.CharField(
                        max_length=80,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Last name",
                    ),
                ),
                (
                    "second_lastname",
                    models.CharField(
                        blank=True,
                        max_length=80,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Second last name",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[("CI", "Citizen ID"), ("FI", "Foreigner ID")],
                        max_length=2,
                        verbose_name="Document type",
                    ),
                ),
                (
                    "document_number",
                    models.IntegerField(
                        unique=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(99999999999),
                        ],
                        verbose_name="Document number",
                    ),
                ),
                ("expedition_date", models.DateField(verbose_name="ID issue date")),
                (
                    "expedition_place",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="ID issue place",
                    ),
                ),
                (
                    "passport_number",
                    models.CharField(
                        blank=True,
                        max_length=12,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ0-9 ]+$",
                                "Only letters, numbers, and spaces are allowed.",
                            )
                        ],
                        verbose_name="Passport number",
                    ),
                ),
                (
                    "passport_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Passport issue date"
                    ),
                ),
                (
                    "birth_day",
                    models.IntegerField(
                        choices=[
                            (1, "1"),
                            (2, "2"),
                            (3, "3"),
                            (4, "4"),
                            (5, "5"),
                            (6, "6"),
                            (7, "7"),
                            (8, "8"),
                            (9, "9"),
                            (10, "10"),
                            (11, "11"),
                            (12, "12"),
                            (13, "13"),
                            (14, "14"),
                            (15, "15"),
                            (16, "16"),
                            (17, "17"),
                            (18, "18"),
                            (19, "19"),
                            (20, "20"),
                            (21, "21"),
                            (22, "22"),
                            (23, "23"),
                            (24, "24"),
                            (25, "25"),
                            (26, "26"),
                            (27, "27"),
                            (28, "28"),
                            (29, "29"),
                            (30, "30"),
                            (31, "31"),
                        ],
                        null=True,
                        verbose_name="Day of birth",
                    ),
                ),
                (
                    "birth_month",
                    models.CharField(
                        choices=[
                            ("1", "January"),
                            ("2", "February"),
                            ("3", "March"),
                            ("4", "April"),
                            ("5", "May"),
                            ("6", "June"),
                            ("7", "July"),
                            ("8", "August"),
                            ("9", "September"),
                            ("10", "October"),
                            ("11", "November"),
                            ("12", "December"),
                        ],
                        max_length=13,
                        null=True,
                        verbose_name="Month of birth",
                    ),
                ),
                (
                    "birth_year",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2025),
                        ],
                        verbose_name="Year of birth",
                    ),
                ),
                (
                    "relationships",
                    models.CharField(
                        choices=[
                            ("Married", "Married"),
                            ("Single", "Single"),
                            ("Common-law marriage", "Common-law marriage"),
                            ("Separated", "Separated"),
                            ("Divorced", "Divorced"),
                            ("Widowed", "Widowed"),
                        ],
                        max_length=30,
                        null=True,
                        verbose_name="Marital status",
                    ),
                ),
                (
                    "profession",
                    models.CharField(
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Profession or occupation",
                    ),
                ),
                (
                    "profesional_id",
                    models.CharField(
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ0-9 ]+$",
                                "Only letters, numbers, and spaces are allowed.",
                            )
                        ],
                        verbose_name="Professional ID card",
                    ),
                ),
                (
                    "body_marks",
                    models.CharField(
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Body marks",
                    ),
                ),
                (
                    "height",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(80),
                            django.core.validators.MaxValueValidator(400),
                        ],
                        verbose_name="Height (cm)",
                    ),
                ),
                (
                    "weight",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name="Weight (kg)",
                    ),
                ),
                (
                    "street_type",
                    models.CharField(
                        choices=[
                            ("Ring road", "Ring road"),
                            ("Highway", "Highway"),
                            ("Highway", "Avenue"),
                            ("Avenue Street", "Avenue Street"),
                            ("Avenue Road", "Avenue Road"),
                            ("Street", "Street"),
                            ("Alley", "Alley"),
                            ("Road", "Road"),
                            ("Circle", "Circle"),
                            ("Diagonal", "Diagonal"),
                            ("Cross street", "Cross street"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Street type",
                    ),
                ),
                (
                    "principal_number",
                    models.CharField(
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Main number",
                    ),
                ),
                (
                    "principal_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Main letter",
                    ),
                ),
                ("bis", models.BooleanField(default=False, verbose_name="Bis?")),
                (
                    "bis_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Bis letter",
                    ),
                ),
                (
                    "quadrant",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EAST", "EAST"),
                            ("WEST", "WEST"),
                            ("NORTH", "NORTH"),
                            ("SOUTH", "SOUTH"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Quadrant",
                    ),
                ),
                (
                    "secondary_number",
                    models.CharField(
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Secondary number",
                    ),
                ),
                (
                    "secondary_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Secondary letter",
                    ),
                ),
                (
                    "quadrant_2",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EAST", "EAST"),
                            ("WEST", "WEST"),
                            ("NORTH", "NORTH"),
                            ("SOUTH", "SOUTH"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Second quadrant",
                    ),
                ),
                (
                    "nmbr",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Final number",
                    ),
                ),
                (
                    "complement",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Address complement / special location",
                    ),
                ),
                (
                    "neighborhood",
                    models.CharField(
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ0-9 ]+$",
                                "Only letters, numbers, and spaces are allowed.",
                            )
                        ],
                        verbose_name="Neighborhood",
                    ),
                ),
                (
                    "phone_number",
                    models.IntegerField(
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(99999999999),
                        ],
                        verbose_name="Mobile phone number",
                    ),
                ),
                (
                    "landline_phone",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(99999999999),
                        ],
                        verbose_name="Landline phone number",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="City of birth",
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Department of birth",
                    ),
                ),
                (
                    "personal_email",
                    models.EmailField(
                        max_length=254, null=True, verbose_name="Personal email address"
                    ),
                ),
                (
                    "formated_address",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Formatted address",
                    ),
                ),
            ],
            options={
                "verbose_name": "PersonalData",
                "verbose_name_plural": "PersonalData",
            },
        ),
        migrations.CreateModel(
            name="Child",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Child's name",
                    ),
                ),
                (
                    "age",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(200),
                        ],
                        verbose_name="Age",
                    ),
                ),
                (
                    "child_id",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(99999999999),
                        ],
                        verbose_name="Identification number",
                    ),
                ),
                (
                    "FamilyData",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="form.familydata",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LegalSituation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "process_date_1",
                    models.DateField(
                        blank=True, null=True, verbose_name="Process Date 1"
                    ),
                ),
                (
                    "investigation_type_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Investigation Type 1",
                    ),
                ),
                (
                    "cause_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Cause 1",
                    ),
                ),
                (
                    "autority_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Authority 1",
                    ),
                ),
                (
                    "process_state_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Process Status 1",
                    ),
                ),
                (
                    "responsible_1",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=333,
                        null=True,
                        verbose_name="Responsible?",
                    ),
                ),
                (
                    "process_date_2",
                    models.DateField(
                        blank=True, null=True, verbose_name="Process Date 2"
                    ),
                ),
                (
                    "investigation_type_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Investigation Type 2",
                    ),
                ),
                (
                    "cause_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Cause 2",
                    ),
                ),
                (
                    "autority_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Authority 2",
                    ),
                ),
                (
                    "process_state_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Process Status 2",
                    ),
                ),
                (
                    "responsible_2",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=333,
                        null=True,
                        verbose_name="Responsible?",
                    ),
                ),
                (
                    "PersonalData",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="legal_situations",
                        to="form.personaldata",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="familydata",
            name="PersonalData",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="form.personaldata",
            ),
        ),
        migrations.CreateModel(
            name="DocumentoGenerado",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tipo", models.CharField(max_length=50)),
                ("archivo", models.FileField(upload_to="documentos/%Y/%m/")),
                (
                    "PersonalData",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documentos",
                        to="form.personaldata",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AssetsIncomeAEP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "salary_and_other_income",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999),
                        ],
                        verbose_name="Salaries and other labor income",
                    ),
                ),
                (
                    "layoff_and_interests",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999),
                        ],
                        verbose_name="Severance pay and interests",
                    ),
                ),
                (
                    "representation_expenses",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999),
                        ],
                        verbose_name="Representation expenses",
                    ),
                ),
                (
                    "leases",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999),
                        ],
                        verbose_name="Rentals",
                    ),
                ),
                (
                    "fee",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999),
                        ],
                        verbose_name="Professional fees",
                    ),
                ),
                (
                    "other_income",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999),
                        ],
                        verbose_name="Other income and earnings",
                    ),
                ),
                (
                    "financial_entity_1",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Financial Institution 1",
                    ),
                ),
                (
                    "account_type_1",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ0-9 ]+$",
                                "Only letters, numbers, and spaces are allowed.",
                            )
                        ],
                        verbose_name="Account Type 1",
                    ),
                ),
                (
                    "account_number_1",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999999),
                        ],
                        verbose_name="Account Number 1",
                    ),
                ),
                (
                    "financial_entity_2",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Financial Institution 2",
                    ),
                ),
                (
                    "account_type_2",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ0-9 ]+$",
                                "Only letters, numbers, and spaces are allowed.",
                            )
                        ],
                        verbose_name="Account Type 2",
                    ),
                ),
                (
                    "account_number_2",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999999),
                        ],
                        verbose_name="Account Number 2",
                    ),
                ),
                (
                    "good_type_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Type of Asset 1",
                    ),
                ),
                (
                    "good_location_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Asset Location 1 (City)",
                    ),
                ),
                (
                    "good_id_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Asset Identification 1",
                    ),
                ),
                (
                    "good_appraisal_1",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999999),
                        ],
                        verbose_name="Commercial Appraisal of Asset 1",
                    ),
                ),
                (
                    "good_type_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Type of Asset 2",
                    ),
                ),
                (
                    "good_location_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Asset Location 2 (City)",
                    ),
                ),
                (
                    "good_id_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Asset Identification 2",
                    ),
                ),
                (
                    "good_appraisal_2",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999999),
                        ],
                        verbose_name="Commercial Appraisal of Asset 2",
                    ),
                ),
                (
                    "obligation_entity_person_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Entity or Person 1",
                    ),
                ),
                (
                    "obligation_concept_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Concept 1",
                    ),
                ),
                (
                    "value_1",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999999),
                        ],
                        verbose_name="Amount 1",
                    ),
                ),
                (
                    "obligation_entity_person_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Entity or Person 2",
                    ),
                ),
                (
                    "obligation_concept_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Concept 2",
                    ),
                ),
                (
                    "value_2",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(999999999999999),
                        ],
                        verbose_name="Amount 2",
                    ),
                ),
                (
                    "entity_or_institution_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Entity or Institution 1",
                    ),
                ),
                (
                    "kind_of_member_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ0-9 ]+$",
                                "Only letters, numbers, and spaces are allowed.",
                            )
                        ],
                        verbose_name="Member Role 1",
                    ),
                ),
                (
                    "entity_or_institution_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Entity or Institution 2",
                    ),
                ),
                (
                    "kind_of_member_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ0-9 ]+$",
                                "Only letters, numbers, and spaces are allowed.",
                            )
                        ],
                        verbose_name="Member Role 2",
                    ),
                ),
                (
                    "company_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Company 1",
                    ),
                ),
                (
                    "kind_of_member_AEP_1",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ0-9 ]+$",
                                "Only letters, numbers, and spaces are allowed.",
                            )
                        ],
                        verbose_name="Member Role 1",
                    ),
                ),
                (
                    "company_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Company 2",
                    ),
                ),
                (
                    "kind_of_member_AEP_2",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ0-9 ]+$",
                                "Only letters, numbers, and spaces are allowed.",
                            )
                        ],
                        verbose_name="Member Role 2",
                    ),
                ),
                (
                    "PersonalData",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="AssetsIncomeAEP",
                        to="form.personaldata",
                    ),
                ),
            ],
            options={
                "verbose_name": "AEP Assets and Income",
                "verbose_name_plural": "AEP Assets and Income",
            },
        ),
        migrations.CreateModel(
            name="AcademicInformation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "studies_1",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Completed Studies 1",
                    ),
                ),
                (
                    "studies_1_year",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2030),
                        ],
                        verbose_name="Year",
                    ),
                ),
                (
                    "studies_title_1",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Degree Obtained",
                    ),
                ),
                (
                    "studies_institution_name_1",
                    models.CharField(
                        blank=True,
                        max_length=70,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Institution Name",
                    ),
                ),
                (
                    "studies_city_1",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="City",
                    ),
                ),
                (
                    "studies_2",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Completed Studies 2",
                    ),
                ),
                (
                    "studies_2_year",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2030),
                        ],
                        verbose_name="Year",
                    ),
                ),
                (
                    "studies_title_2",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Degree Obtained",
                    ),
                ),
                (
                    "studies_institution_name_2",
                    models.CharField(
                        blank=True,
                        max_length=70,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Institution Name",
                    ),
                ),
                (
                    "studies_city_2",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="City",
                    ),
                ),
                (
                    "foreign_language_1",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Foreign Language 1",
                    ),
                ),
                (
                    "can_read_foreign_language_1",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Can Read?",
                    ),
                ),
                (
                    "can_speak_foreign_language_1",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Can Speak?",
                    ),
                ),
                (
                    "can_write_foreign_language_1",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Can Write?",
                    ),
                ),
                (
                    "foreign_language_2",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Foreign Language 2",
                    ),
                ),
                (
                    "can_read_foreign_language_2",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Can Read?",
                    ),
                ),
                (
                    "can_speak_foreign_language_2",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Can Speak?",
                    ),
                ),
                (
                    "can_write_foreign_language_2",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Can Write?",
                    ),
                ),
                (
                    "word_check",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Word",
                    ),
                ),
                (
                    "excel_check",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Excel",
                    ),
                ),
                (
                    "powerpoint_check",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="PowerPoint",
                    ),
                ),
                (
                    "access_check",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Access",
                    ),
                ),
                (
                    "internet_check",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        null=True,
                        verbose_name="Internet",
                    ),
                ),
                (
                    "other_check",
                    models.CharField(
                        blank=True,
                        max_length=333,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Other Tools (comma-separated)",
                    ),
                ),
                (
                    "PersonalData",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="academic_information",
                        to="form.personaldata",
                    ),
                ),
            ],
            options={
                "verbose_name": "Academic Information",
                "verbose_name_plural": "Academic Information Entries",
            },
        ),
        migrations.CreateModel(
            name="Sibling",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sibling_lastname",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Last name",
                    ),
                ),
                (
                    "sibling_second_lastname",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Second last name",
                    ),
                ),
                (
                    "sibling_first_name",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="First name",
                    ),
                ),
                (
                    "sibling_second_name",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Middle name",
                    ),
                ),
                (
                    "sibling_id",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(99999999999),
                        ],
                        verbose_name="ID number",
                    ),
                ),
                (
                    "sibling_occupation",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑáéíóúñ ]+$",
                                "Only letters and spaces are allowed.",
                            )
                        ],
                        verbose_name="Occupation",
                    ),
                ),
                (
                    "sibling_phone",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(99999999999),
                        ],
                        verbose_name="Phone number",
                    ),
                ),
                (
                    "sibling_street_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Ring road", "Ring road"),
                            ("Highway", "Highway"),
                            ("Avenue", "Avenue"),
                            ("Avenue Street", "Avenue Street"),
                            ("Avenue Avenue", "Avenue Avenue"),
                            ("Street", "Street"),
                            ("Alley", "Alley"),
                            ("Avenue", "Avenue"),
                            ("Circle", "Circle"),
                            ("Diagonal", "Diagonal"),
                            ("Cross street", "Cross street"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Street type",
                    ),
                ),
                (
                    "sibling_principal_number",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Main number",
                    ),
                ),
                (
                    "sibling_principal_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Main letter",
                    ),
                ),
                (
                    "sibling_bis",
                    models.BooleanField(default=False, verbose_name="Bis?"),
                ),
                (
                    "sibling_bis_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Bis letter",
                    ),
                ),
                (
                    "sibling_quadrant",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EAST", "EAST"),
                            ("WEST", "WEST"),
                            ("NORTH", "NORTH"),
                            ("SOUTH", "SOUTH"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Quadrant",
                    ),
                ),
                (
                    "sibling_second_number",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Secondary number",
                    ),
                ),
                (
                    "sibling_second_letter",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                            ("H", "H"),
                            ("I", "I"),
                            ("J", "J"),
                            ("K", "K"),
                            ("L", "L"),
                            ("M", "M"),
                            ("N", "N"),
                            ("O", "O"),
                            ("P", "P"),
                            ("Q", "Q"),
                            ("R", "R"),
                            ("S", "S"),
                            ("T", "T"),
                            ("U", "U"),
                            ("V", "V"),
                            ("W", "W"),
                            ("X", "X"),
                            ("Y", "Y"),
                            ("Z", "Z"),
                        ],
                        max_length=2,
                        null=True,
                        verbose_name="Secondary letter",
                    ),
                ),
                (
                    "sibling_second_quadrant",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EAST", "EAST"),
                            ("WEST", "WEST"),
                            ("NORTH", "NORTH"),
                            ("SOUTH", "SOUTH"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Second quadrant",
                    ),
                ),
                (
                    "sibling_nmbr",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numbers are allowed."
                            )
                        ],
                        verbose_name="Final number",
                    ),
                ),
                (
                    "sibling_complement",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Address complement / special location",
                    ),
                ),
                (
                    "sibling_built_address",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zÁÉÍÓÚÑÜüöÖäÄáéíóúñ0-9\\s.,¨:#-]*$",
                                "Only letters (including umlauts), numbers, spaces, and basic symbols are allowed.",
                            )
                        ],
                        verbose_name="Formatted address",
                    ),
                ),
                (
                    "FamilyData",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="siblings",
                        to="form.familydata",
                    ),
                ),
            ],
        ),
    ]
